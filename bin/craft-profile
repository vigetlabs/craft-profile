#!/usr/bin/env node

/**
 * This program is a command-line node app that extracts and averages
 * Craft Profiler statistics that Craft CMS reports in the browser
 * console when Craft's devMode is on.
 *
 * It is useful for viewing averages for Craft execution time and
 * the number of database queries required to construct the page.
 *
 * Options/Flags:
 *     -b, --baseUrl      Base URL that paths will be appended to
 *     -p, --paths        Comma-separated list of paths, e.g. "/,/foo,/bar/baz"
 *     -i, --iterations   How many times to load each page
 *     -w, --workers      How much concurrency (how many workers)
 *     -t, --timeout      How long to wait before bailing on a request
 *     -d, --delay        How long to wait before initiating subsequent requests
 *     -v, --verbose      Output additional information while running
 *     -o, --output       File to write output to, if not specified the program
 *                          output will be displayed in the terminal
 *
 *     -c, --config       Relative path to JSON config file
 *                          (will override the above flags)
 *
 * This program accepts a JSON config file on stdin and will output to
 * the specified file if the program's output is redirected.
 **/

'use strict'

const fs        = require('fs')
const path      = require('path')
const argv      = require('minimist')(process.argv.slice(2), { boolean: 'verbose' })
const init      = require('../lib/init')
const invariant = require('invariant')

/**
 * Default configuration
 **/
let config = {
  baseUrl    : '',
  paths      : [],
  iterations : 10,
  workers    : 4,
  timeout    : 5000,
  delay      : 0,
  verbose    : false
}

/**
 * Read and parse user-supplied command-line arguments
 **/
const flags = {
  baseUrl    : argv.b || argv.baseUrl || argv['base-url'] || argv.base_url,
  paths      : argv.p || argv.paths,
  iterations : argv.i || argv.iterations,
  workers    : argv.w || argv.workers,
  config     : argv.c || argv.config,
  delay      : argv.d || argv.delay,
  verbose    : argv.verbose
}

/**
 * Copy values from flags to config if defined and not-null
 **/
for (let flag in flags) {
  let value = flags[flag]

  if (value !== undefined && value !== null) {
    config[flag] = value
  }
}

/**
 * Read and parse user-supplied json config file
 **/
if (flags.config) {
  const configPath = path.resolve(process.cwd(), flags.config)
  let fileContents
  let json

  try {
    fileContents = fs.readFileSync(configPath)
  } catch(e) {
    console.log('Could not open the config file "' + flags.config + '".')
    process.exit(1)
  }

  try {
    json = JSON.parse(fileContents)
  } catch(e) {
    console.log('Error parsing config json')
    process.exit(1)
  }

  config = Object.assign({}, config, json)
}

/**
 * Ensure config.paths is an array
 **/
if (!isArray(config.paths)) {
  config.paths = config.paths.split(',')
}

/**
 * Validate config values
 **/
invariant(
  typeof config.baseUrl === 'string' && config.baseUrl.length,
  '"baseUrl" should be a non-empty string'
)

invariant(
  config.paths.length,
  '"paths" should not be an empty list'
)

invariant(
  typeof config.iterations === 'number',
  '"iterations" should be a number'
)

invariant(
  typeof config.workers === 'number',
  '"workers" should be a number'
)

invariant(
  typeof config.delay === 'number',
  '"delay" should be a number'
)

invariant(
  typeof config.verbose === 'boolean',
  '"verbose" should be a number'
)

/**
 * Receive and read user-supplied json config file from stdin if present
 **/
if (process.stdin.isTTY) {
  // NO config provided via stdin
  init(config)
} else {
  // config provided via stdin
  let inputChunks = []

  process.stdin.on('data', function(chunk) {
    inputChunks.push(chunk)
  })

  process.stdin.on('end', function() {
    const inputJSON = inputChunks.join()

    try {
      config = Object.assign({}, config, JSON.parse(inputJSON))
      init(config)
    } catch(e) {
      console.log('Error parsing config JSON')
      process.exit(1)
    }
  })
}

function isArray(maybeArr) {
  return Object.prototype.toString.call(maybeArr) === '[object Array]'
}
